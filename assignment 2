from typing import Optional
from pygame.math import Vector2
from pygame.surface import Surface
from vi import Agent, Simulation, Config
import polars as pl
from typing import List
import numpy as np
import pandas as pd
from vi.simulation import HeadlessSimulation

# find a way to count the population
class Prey(Agent):

    def update(self):
        self.there_is_no_escape()
        rep_prob = np.random.uniform()
                
        if rep_prob < 0.004:
            self.reproduce()

        self.pos += self.move

class Hunter(Agent):
    def __init__(self, images: list[Surface], simulation: HeadlessSimulation, pos: Vector2 | None = None, move: Vector2 | None = None, energy=400):
        super().__init__(images, simulation, pos, move)
        self.energy = energy

    def update(self):
        self.there_is_no_escape()
        ###########################

        # Comment the following for energy level sim
        #survive = np.random.uniform()
        #if survive < 0.001:
        #    self.kill()

        ###########################
        prey = (
            self.in_proximity_accuracy()
            .filter_kind(Prey)
            .without_distance()
            .first()
        )
        
        ###########################

        # Comment the following for energy free sim
        self.energy -= 1

        ###########################

        if prey is not None:
            prey.kill()
            self.reproduce()
            self.energy = 230

        ###########################

        # Comment the following for energy free sim
        if self.energy == 0:
            self.kill()

        ###########################
        self.pos += self.move

config = Config()
x, y = config.window.as_tuple()

df = (Simulation(Config(radius=25, fps_limit=120))
                        .batch_spawn_agents(20, Prey,images=["images/green.png"])
                        .batch_spawn_agents(, Hunter,images=["images/red.png"])
                        .run()
                        )

#plot = df.snapshots
#df_snapshots = pd.DataFrame(plot)
#df_snapshots.to_csv('Assignment 2/agents_count.csv',index=False)
#
#
#dfs = pd.read_csv('snapshots.csv')
#columns_to_delete = ['0', '2', '3']
##
### Delete the specified columns
#dfss = dfs.drop(columns=columns_to_delete)
#column_name_mapping = {'1': 'id', 
#                       '4': 'pop'}
##
### Rename the columns using the dictionary
#dfsss = dfss.rename(columns=column_name_mapping)
#dfsss.to_csv('Assignment 2/sim_data.csv', index=False)
#
